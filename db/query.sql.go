// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO Orders(VisitId, DishId, Rating, ReviewText)
VALUES (?, ?, ?, ?)
`

type CreateOrderParams struct {
	Visitid    sql.NullInt64
	Dishid     sql.NullInt64
	Rating     sql.NullFloat64
	Reviewtext sql.NullString
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.Visitid,
		arg.Dishid,
		arg.Rating,
		arg.Reviewtext,
	)
	return err
}

const createVisit = `-- name: CreateVisit :exec
INSERT INTO Visit(Date, Time, UserId, RestaurantId)
VALUES (?, ?, ?, ?)
`

type CreateVisitParams struct {
	Date         time.Time
	Time         interface{}
	Userid       sql.NullInt64
	Restaurantid sql.NullInt64
}

func (q *Queries) CreateVisit(ctx context.Context, arg CreateVisitParams) error {
	_, err := q.db.ExecContext(ctx, createVisit,
		arg.Date,
		arg.Time,
		arg.Userid,
		arg.Restaurantid,
	)
	return err
}

const getOrdersForVisit = `-- name: GetOrdersForVisit :many
SELECT d.Name, o.Rating, o.ReviewText FROM
    Orders o JOIN Dish d ON o.DishId = d.id
    WHERE o.VisitId = ?
`

type GetOrdersForVisitRow struct {
	Name       string
	Rating     sql.NullFloat64
	Reviewtext sql.NullString
}

func (q *Queries) GetOrdersForVisit(ctx context.Context, visitid sql.NullInt64) ([]GetOrdersForVisitRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersForVisit, visitid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersForVisitRow
	for rows.Next() {
		var i GetOrdersForVisitRow
		if err := rows.Scan(&i.Name, &i.Rating, &i.Reviewtext); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurantHistory = `-- name: GetRestaurantHistory :many
SELECT id, Date, Time FROM Visit
    WHERE UserId = ? AND RestaurantId = ?
`

type GetRestaurantHistoryParams struct {
	Userid       sql.NullInt64
	Restaurantid sql.NullInt64
}

type GetRestaurantHistoryRow struct {
	ID   int64
	Date time.Time
	Time interface{}
}

func (q *Queries) GetRestaurantHistory(ctx context.Context, arg GetRestaurantHistoryParams) ([]GetRestaurantHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getRestaurantHistory, arg.Userid, arg.Restaurantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRestaurantHistoryRow
	for rows.Next() {
		var i GetRestaurantHistoryRow
		if err := rows.Scan(&i.ID, &i.Date, &i.Time); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurantsLike = `-- name: GetRestaurantsLike :many
SELECT id, name, area, address, mapslink, mapsratingoutof5 FROM Restaurant WHERE Name LIKE ?
`

func (q *Queries) GetRestaurantsLike(ctx context.Context, name string) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, getRestaurantsLike, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Area,
			&i.Address,
			&i.Mapslink,
			&i.Mapsratingoutof5,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisitById = `-- name: GetVisitById :one
SELECT id, Date, Time, UserId, RestaurantId FROM Visit WHERE id = ?
`

type GetVisitByIdRow struct {
	ID           int64
	Date         time.Time
	Time         interface{}
	Userid       sql.NullInt64
	Restaurantid sql.NullInt64
}

func (q *Queries) GetVisitById(ctx context.Context, id int64) (GetVisitByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getVisitById, id)
	var i GetVisitByIdRow
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Time,
		&i.Userid,
		&i.Restaurantid,
	)
	return i, err
}

const updateVisit = `-- name: UpdateVisit :exec
UPDATE Visit
SET date = ?, time = ?, restaurantId = ?
WHERE id = ? AND userId = ?
`

type UpdateVisitParams struct {
	Date         time.Time
	Time         interface{}
	Restaurantid sql.NullInt64
	ID           int64
	Userid       sql.NullInt64
}

func (q *Queries) UpdateVisit(ctx context.Context, arg UpdateVisitParams) error {
	_, err := q.db.ExecContext(ctx, updateVisit,
		arg.Date,
		arg.Time,
		arg.Restaurantid,
		arg.ID,
		arg.Userid,
	)
	return err
}
